// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                 @id @default(uuid())
  email               String                 @unique
  emailVerified       Boolean                @default(false)
  emailVericationCode EmailVerificationCode?

  accounts Account[]

  name String?

  sessions Session[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastSeen  DateTime?

  workspaces WorkspaceMember[]
}

enum DeviceType {
  UNKNOWN
  PHONE
  TABLET
  DESKTOP
  TV
}

enum DevicePlatform {
  IOS
  ANDROID
}

model Device {
  id       Int    @id @default(autoincrement())
  deviceId String @unique

  // Device Details
  deviceName         String?
  deviceType         DeviceType
  devicePlatform     DevicePlatform
  deviceYearClass    Int?
  deviceManufacturer String?
  deviceModelName    String?
  deviceOsName       String?
  deviceOsVersion    String?

  pushToken String

  subscriptions ChannelSubscription[]
  messages      MessageRecipient[]
  authTokens    DeviceToken[]

  createdAt DateTime @default(now())
}

model DeviceToken {
  id String @id @default(uuid())

  device   Device @relation(fields: [deviceId], references: [id])
  deviceId Int

  token     String   @db.Text
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Channel {
  id          String    @id @default(uuid())
  externalId  String?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  name       String
  willExpire Boolean @default(true)

  subscribers ChannelSubscription[]
  groups      DeliveryGroupChannel[]
  messages    ChannelMessages[]

  createdAt         DateTime                  @default(now())
  expiresAt         DateTime? // Expiration date if no subscribers are created
  subscriptionCodes ChannelSubscriptionCode[]
}

model ChannelSubscription {
  id          String    @id @default(uuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  channel   Channel @relation(fields: [channelId], references: [id])
  device    Device  @relation(fields: [deviceId], references: [id])
  channelId String
  deviceId  Int

  createdAt DateTime @default(now())
}

model ChannelSubscriptionCode {
  id String @id @default(uuid())

  default Boolean @default(false) // If true, it will show up in the UI as the default subscription code
  enabled Boolean @default(true) // Default code is generated automatically, but can be disabled

  code      String    @unique
  channel   Channel   @relation(fields: [channelId], references: [id])
  channelId String
  usesLeft  Int? // If null, unlimited uses
  expiresAt DateTime? // If null, never expires

  createdAt DateTime @default(now())
}

model Message {
  id          String    @id @default(uuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  title String?
  body  String?
  data  Json?

  channels       ChannelMessages[]
  recipients     MessageRecipient[]
  expoPushTicket ExpoPushTicket?

  createdAt DateTime @default(now())
}

model ExpoPushTicket {
  id String @id @default(uuid())

  ticketId      String? @unique
  ticketStatus  String
  ticketMessage String?
  ticketDetails Json?

  message   Message @relation(fields: [messageId], references: [id])
  messageId String  @unique

  receipt   ExpoTicketReceipt? @relation(fields: [receiptId], references: [id])
  receiptId String?            @unique

  createdAt DateTime @default(now())
}

model ExpoTicketReceipt {
  id String @id @default(uuid())

  receiptId      String @unique
  receiptStatus  String
  receiptMessage String
  receiptDetails Json

  ticket ExpoPushTicket?

  createdAt DateTime @default(now())
}

model ChannelMessages {
  id String @id @default(uuid())

  channel   Channel @relation(fields: [channelId], references: [id])
  channelId String
  message   Message @relation(fields: [messageId], references: [id])
  messageId String

  createdAt DateTime @default(now())
}

model MessageRecipient {
  id String @id @default(uuid())

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  message   Message @relation(fields: [messageId], references: [id])
  messageId String
  device    Device  @relation(fields: [deviceId], references: [id])
  deviceId  Int

  createdAt DateTime @default(now())
}

model DeliveryGroup {
  id String @id @default(uuid())

  workspaceId   String
  workspace     Workspace    @relation(fields: [workspaceId], references: [id])
  applicationId String?
  application   Application? @relation(fields: [applicationId], references: [id])

  name     String
  channels DeliveryGroupChannel[]

  createdAt DateTime @default(now())
}

model DeliveryGroupChannel {
  id String @id @default(uuid())

  deliveryGroup   DeliveryGroup @relation(fields: [deliveryGroupId], references: [id])
  deliveryGroupId String

  channel   Channel @relation(fields: [channelId], references: [id])
  channelId String

  createdAt DateTime @default(now())
}

model Application {
  id          String    @id @default(uuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  name   String
  groups DeliveryGroup[]

  createdAt DateTime @default(now())
}

model APIKey {
  id          String    @id @default(uuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  key  String @unique
  name String

  enabled   Boolean   @default(true)
  lastUsed  DateTime?
  createdAt DateTime  @default(now())
}
